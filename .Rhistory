demo
help.start
help.start()
demo.()
demo()
?boxplot
??standartgeneric
number = 3
rm(number)
number = 4
a = 1
b = 2
rm(b)
?help
install.packages("git2r")
library(git2r)
install.packages("XLConnect")
library(XLConnect)
?`datasets-package`
knitr::opts_chunk$set(echo = TRUE)
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
setwd("~/Desktop/Pattern_Trends/R_Projekte/Week_2")
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
setwd("~/Desktop/Pattern_Trends/R_Projekte/Week_2")
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
datafolder <- here::here()
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
library(readr)        # to import tabular data (e.g. csv)
library(dplyr)        # to manipulate (tabular) data
library(ggplot2)      # to visualize data
library(sf)           # to handle spatial vector data
library(terra)        # To handle raster data
library(lubridate)    # To handle dates and times
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
ws_be <- read_csv("0_rawdata/wildschwein_BE.csv")
library(readr)        # to import tabular data (e.g. csv)
ws_be <- read_csv("0_rawdata/wildschwein_BE.csv")
ws_be <- read_csv("0_rawdata/wildschwein_BE_2056.csv")
## Load the necessary libraries ################################################
library(readr)        # to import tabular data (e.g. csv)
library(dplyr)        # to manipulate (tabular) data
library(ggplot2)      # to visualize data
library(sf)           # to handle spatial vector data
library(terra)        # To handle raster data
library(lubridate)    # To handle dates and times
#Task 1
## Import the downloaded csv ##################################################
ws_be <- read_csv("0_rawdata/wildschwein_BE_2056.csv")
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
datafolder <- here::here()
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
ws_be <- read_csv("0_rawdata/wildschwein_BE_2056.csv")
ws_be <- read_csv("wildschwein_BE_2056.csv")
View(ws_be)
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
View(ws_be_sf)
View(ws_be_sf)
View(ws_be_sf)
# first overview
#producing data with timelag
ws_be_sf %>%
group_by(TierID) %>%
mutate(., timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs")) -> wildschwein_BE_sf
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
wildschwein_BE_sf %>% count(TierID)
count
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
view(wildschwein_BE_sf)
ggplot(data = ws_be_sf) +
geom_line(aes(x = DatetimeUTC, y = TierID)) -> p1
p1
ggplot(data = wildschwein_BE_sf) +
geom_bar(aes(x = timelag, fill = TierID), stat = "count")
## Load the necessary libraries ################################################
library(readr)        # to import tabular data (e.g. csv)
library(dplyr)        # to manipulate (tabular) data
library(ggplot2)      # to visualize data
library(sf)           # to handle spatial vector data
library(terra)        # To handle raster data
library(lubridate)    # To handle dates and times
#Task 1
## Import the downloaded csv ##################################################
ws_be <- read_csv("wildschwein_BE_2056.csv")
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
datafolder <- here::here()
wildschwein_BE <- read_delim(file.path(datafolder, "wildschwein_BE_2056.csv")) # adjust path
wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
ws_be <- read_csv("wildschwein_BE_2056.csv")
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
# first overview
#producing data with timelag
ws_be_sf %>%
group_by(TierID) %>%
mutate(., timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs")) -> wildschwein_BE_sf
wildschwein <- wildschwein_BE %>% group_by(TierID) %>% mutate(timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC)))
# wildschwein$timelag  <- as.numeric(difftime(lead(wildschwein$DatetimeUTC), wildschwein$DatetimeUTC))
# wildschwein <- mutate(wildschwein,timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC)))
#Task 2
# How many individuals were tracked?
wildschwein_BE_sf %>% count(TierID)
count
# further exploration
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
view(wildschwein_BE_sf)
wildschwein <- wildschwein_BE_sf %>% group_by(TierID) %>% mutate(timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC)))
wildschwein_BE_sf %>% count(TierID)
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
view(ws_be_sf)
ggplot(data = ws_be_sf) +
geom_line(aes(x = DatetimeUTC, y = TierID)) -> p1
p1
ggplot(data = wildschwein_BE_sf) +
geom_bar(aes(x = timelag, fill = TierID), stat = "count")
ws_be_sf %>%
mutate(steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag)
View(ws_be_sf)
caro_sf <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE)
caro <- read_csv("caro60.csv")
caro_sf <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE)
caro_sf %>%
slice(seq(from=1, to = 200, by = 3)) -> caro_3
caro_sf %>%
slice(seq(from=1, to = 200, by = 6)) -> caro_6
caro_sf %>%
slice(seq(from=1, to = 200, by = 9)) -> caro_9
1 <- 2
calculator <- function(df_input, interval){
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
calculator
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
rbind(caro, caro_3, caro_6, caro_9) -> caro_merge
Task 5: Deriving movement parameters II: Rolling window functions
```{r}
library(zoo)
example <- rnorm(10)
rollmean(example,k = 3,fill = NA,align = "left")
##  [1] -0.5049544 -0.3781283 -0.1273157  0.4523153  0.4534811  0.8658536
##  [7]  0.5452571  1.0210648         NA         NA
rollmean(example,k = 4,fill = NA,align = "left")
##  [1] -0.25933381 -0.22379720  0.06456868  0.45949282  0.70918920  0.56899826
##  [7]  0.88605495          NA          NA          NA
example <- rnorm(10)
rollmean(example,k = 3,fill = NA,align = "left")
##  [1] -0.5049544 -0.3781283 -0.1273157  0.4523153  0.4534811  0.8658536
##  [7]  0.5452571  1.0210648         NA         NA
rollmean(example,k = 4,fill = NA,align = "left")
##  [1] -0.25933381 -0.22379720  0.06456868  0.45949282  0.70918920  0.56899826
##  [7]  0.88605495          NA          NA          NA
library(zoo)
rollmean(caro$speed, k = 3)
ggplot(data = wildschwein_BE_sf) +
geom_bar(aes(x = timelag, fill = TierID), stat = "count")
ggplot(data = wildschwein_BE_sf) +
geom_bar(aes(x = timelag, fill = TierID), stat = "count") +
lims(x = c(0,15000))
ggplot(data = wildschwein_BE_sf) +
geom_histogram(aes(x = timelag, fill = TierID), binwidth = 100) +
lims(x = c(0,15000), y = (0,))
ggplot(data = wildschwein_BE_sf) +
geom_histogram(aes(x = timelag, fill = TierID), binwidth = 100) +
lims(x = c(0,15000))
calculator(caro_sf, "1 minute") -> caro
calculator(caro_3, "3 minutes") -> caro_3
calculator(caro_6, "6 minutes") -> caro_6
calculator(caro_9, "9 minutes") -> caro_9
calculator <- function(df_input, interval){
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
Calculate timelag, steplength and speed
```{r}
calculator <- function(df_input, interval){
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
calculator <- function(df_input, interval){
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
return(df_output)
}
calculator(caro_sf, "1 minute") -> caro
calculator(caro_3, "3 minutes") -> caro_3
calculator(caro_6, "6 minutes") -> caro_6
calculator(caro_9, "9 minutes") -> caro_9
rbind(caro, caro_3, caro_6, caro_9) -> caro_merge
}
calculator <- function(df_input, interval){
df_input %>%
mutate(timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs"),
steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag,
interval = interval) -> df_output
return(df_output)
}
calculator(caro_sf, "1 minute") -> caro
calculator(caro_3, "3 minutes") -> caro_3
calculator(caro_6, "6 minutes") -> caro_6
calculator(caro_9, "9 minutes") -> caro_9
rbind(caro, caro_3, caro_6, caro_9) -> caro_merge
View(caro_3)
ggplot(data = caro_merge) +
geom_line(aes(x = DatetimeUTC, y = speed, color = interval))
caro_merge %>%
filter(interval == "1 minute" | interval  == "3 minutes") %>%
ggplot(data = ., aes(x = E, y = N, color = interval, alpha = interval)) +
geom_path() +
geom_point() +
scale_alpha_discrete(range = c(0.4, 1)) -> p1
p1
caro_merge %>%
filter(interval == "1 minute" | interval  == "6 minutes") %>%
ggplot(data = ., aes(x = E, y = N, color = interval, alpha = interval)) +
geom_path() +
geom_point() +
scale_alpha_discrete(range = c(0.4, 1)) -> p2
p2
ggarrange(p1, p2, p3)
?ggarrange
caro_merge %>%
filter(interval == "1 minute" | interval  == "9 minutes") %>%
ggplot(data = ., aes(x = E, y = N, color = interval, alpha = interval)) +
geom_path() +
geom_point() +
scale_alpha_discrete(range = c(0.4, 1)) -> p3
p3
rollmean(caro$speed, k = 3)
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
gitcreds_get()
load(ggarrange)
?ggarrange
?ggplot
?ggplot2
# NOT RUN {
data("ToothGrowth")
df <- ToothGrowth
View(ToothGrowth)
View(df)
df$dose <- as.factor(df$dose)
df$dose <- as.factor(df$dose)
View(ToothGrowth)
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp
dp
dp <- ggdotplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
df$dose <- as.factor(df$dose)
View(ToothGrowth)
View(ToothGrowth)
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
load(ggplot2)
load(ggplot)
load(ggplot)
library(ggplot2)      # to visualize data
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Create some plots
# ::::::::::::::::::::::::::::::::::::::::::::::::::
# Box plot
bxp <- ggplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp
bxp <- geom_boxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp
plotlist
install.packages("ggpubr")
library(ggpubr)
bxp <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp
dp <- ggdotplot(df, x = "dose", y = "len",
color = "dose", palette = "jco")
# Density plot
dens <- ggdensity(df, x = "len", fill = "dose", palette = "jco")
ggarrange(bxp, dp, dens, ncol = 2, nrow = 2)
# Use a common legend for multiple plots
ggarrange(bxp, dp,  common.legend = TRUE)
ggarrange(p1, p2, p3)
ggarrange(bxp, dp, dens, ncol = 2, nrow = 2)
# Use a common legend for multiple plots
ggarrange(bxp, dp,  common.legend = TRUE)
dens
View(dens)
View(ToothGrowth)
ggarrange(p1, p2, p3)
View(caro_sf)
View(wildschwein)
wildschwein_BE_sf %>% count(TierID)
count
View(caro_sf)
p1
ws_be_sf %>%
mutate(steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag)
ggplot(data = ws_be_sf) +
geom_line(aes(x = DatetimeUTC, y = TierID)) -> p1
p1
ggplot(data = ws_be_sf) +
geom_boxplot(aes(x = DatetimeUTC, y = TierID)) -> p1
p1
View(caro)
?grouped_by
?grouped_by
?groupe
?group_by
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
## Load the necessary libraries ################################################
library(readr)        # to import tabular data (e.g. csv)
library(dplyr)        # to manipulate (tabular) data
library(ggplot2)      # to visualize data
library(sf)           # to handle spatial vector data
library(terra)        # To handle raster data
library(lubridate)    # To handle dates and times
library(ggpubr)       # To arrange multiple ggplots on the same page
#Task 1
## Import the downloaded csv ##################################################
ws_be <- read_csv("wildschwein_BE_2056.csv")
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
# Chunk 3
# first overview
#producing data with timelag
ws_be_sf %>%
group_by(TierID) %>%
mutate(., timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs")) -> wildschwein_BE_sf
# wildschwein$timelag  <- as.numeric(difftime(lead(wildschwein$DatetimeUTC), wildschwein$DatetimeUTC))
# wildschwein <- mutate(wildschwein,timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC)))
#Task 2
# How many individuals were tracked?
wildschwein_BE_sf %>% count(TierID)
count
# further exploration
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
view(ws_be_sf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
## Load the necessary libraries ################################################
library(readr)        # to import tabular data (e.g. csv)
library(dplyr)        # to manipulate (tabular) data
library(ggplot2)      # to visualize data
library(sf)           # to handle spatial vector data
library(terra)        # To handle raster data
library(lubridate)    # To handle dates and times
library(ggpubr)       # To arrange multiple ggplots on the same page
#Task 1
## Import the downloaded csv ##################################################
ws_be <- read_csv("wildschwein_BE_2056.csv")
ws_be_sf <- st_as_sf(ws_be, coords = c("E", "N"), crs = 2056, remove = FALSE)
# Chunk 3
# first overview
#producing data with timelag
ws_be_sf %>%
group_by(TierID) %>%
mutate(., timelag = as.integer(difftime(lead(DatetimeUTC),DatetimeUTC), units = "secs")) -> wildschwein_BE_sf
# wildschwein$timelag  <- as.numeric(difftime(lead(wildschwein$DatetimeUTC), wildschwein$DatetimeUTC))
# wildschwein <- mutate(wildschwein,timelag = as.numeric(difftime(lead(DatetimeUTC),DatetimeUTC)))
#Task 2
# How many individuals were tracked?
wildschwein_BE_sf %>% count(TierID)
count
# further exploration
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName)
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName)
ws_be_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T))
View(ws_be_sf)
View(wildschwein_BE_sf)
wildschwein_BE_sf %>%
st_drop_geometry() %>%
group_by(TierID, TierName) %>%
summarise(pings = n(),
start_time = min(DatetimeUTC),
end_time = max(DatetimeUTC),
sample_interval = mean(timelag, na.rm = T),
tracking_time = sum(timelag, na.rm = T)) %>%
mutate(tracking_time_days = days(day(seconds_to_period(tracking_time))))
wildschwein_BE_sf %>%
mutate(steplength = sqrt((E - lead(E,1))^2 + (N - lead(N,1))^2),
speed = steplength/timelag)
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
3
git init
git init
git init
git config user.email
gitcreds
gitcreds_set()
gitcreds_get()
